plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.1'
	id 'io.spring.dependency-management' version '1.1.7'
	id "com.github.node-gradle.node" version "2.2.0"
}

group = 'com.github.dm0896665'
version = '1'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-freemarker'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	//implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-devtools'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
	//runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

node {
	version = "12.13.1"
	download = true
	workDir = file("${project.projectDir}/npm")
	nodeModulesDir = file("${project.projectDir}/npm")
}
task copyFrontendAssets(type: Copy) {
	from "${project.projectDir}/npm/node_modules"
	into "${project.projectDir}/src/main/resources/static/node_modules"
}

processResources.dependsOn copyFrontendAssets

bootJar {
	dependsOn copyFrontendAssets // Make sure frontend assets are included
}

tasks.named('test') {
	useJUnitPlatform()
}
